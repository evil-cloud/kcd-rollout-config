# --- Base manifest values ---
nameOverride: "gitops-api-v3"
fullnameOverride: "gitops-api-v3"
autoscaling:
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
serviceAccount:
  create: true
  automount: false
  annotations:
    kubernetes.io/automount-service-account-token: "false"
image:
  repository: d4rkghost47/gitops-api
  pullPolicy: IfNotPresent
  # tag: "4bf1a035"
  # tag: "ae21d1ce"
  tag: "ee1ffd3a"
imagePullSecrets: []
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/metrics"
  seccomp.security.alpha.kubernetes.io/pod: "runtime/default"
podLabels: {}
podSecurityContext:
  fsGroup: 10001
  runAsGroup: 3000
  runAsUser: 10001
  seccompProfile:
    type: RuntimeDefault
  supplementalGroups: [3000]
  sysctls:
  - name: net.ipv4.ip_unprivileged_port_start
    value: "0"
securityContext:
  privileged: false
  procMount: Default
  runAsNonRoot: true
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
    add:
    - NET_BIND_SERVICE
  seccompProfile:
    type: RuntimeDefault
service:
  type: ClusterIP
  port: 80
  targetPort: 8000
  containerPortName: http
  appProtocol: http
  sessionAffinity: None
  publishNotReadyAddresses: false
  ipFamilyPolicy: SingleStack
  ipFamilies:
    - IPv4
env:
  - name: PYTHONUNBUFFERED
    value: "1"
  - name: HOME
    value: "/tmp"
  - name: PYTHONDONTWRITEBYTECODE
    value: "1"
  - name: TMPDIR
    value: "/tmp"
resources:
  limits:
    cpu: "200m"
    memory: "512Mi"
    ephemeral-storage: "256Mi"
  requests:
    cpu: "100m"
    memory: "128Mi"
    ephemeral-storage: "64Mi"
livenessProbe:
  httpGet:
    path: /health
    port: http
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3
readinessProbe:
  httpGet:
    path: /health
    port: http
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3
startupProbe:
  httpGet:
    path: /health
    port: http
    scheme: HTTP
  failureThreshold: 6
  periodSeconds: 5
lifecycle:
  preStop:
    exec:
      command: ["/bin/sh", "-c", "sleep 10"]
terminationGracePeriodSeconds: 30
restartPolicy: Always
dnsPolicy: ClusterFirst
dnsConfig:
  options:
  - name: ndots
    value: "5"
volumes:
  - name: tmp
    emptyDir:
      medium: Memory
      sizeLimit: 64Mi
  - name: cache
    emptyDir:
      medium: Memory
      sizeLimit: 128Mi
volumeMounts:
  - name: tmp
    mountPath: /tmp
    readOnly: false
  - name: cache
    mountPath: /var/cache
    readOnly: false
podDisruptionBudget:
  enabled: true
  minAvailable: "50%"
  unhealthyPodEvictionPolicy: AlwaysAllow
priorityClass:
  enabled: true
  value: 1000000
  globalDefault: false
  preemptionPolicy: PreemptLowerPriority
  annotations:
    security.kubernetes.io/critical-pod: "true"
# --- Service Monitor Configuration ---
serviceMonitor:
  namespace: monitoring
  interval: 15s
  scrapeTimeout: 10s
  labels:
    release: prom
  endpoints:
    - port: http
      path: /metrics
      interval: 15s 
      scrapeTimeout: 10s 
# --- Istio Configuration ---
istio:
  gateway:
    enabled: true
    namespace: istio-gateway
    selector:
      istio: gateway
    servers:
      - port:
          number: 80
          name: http
          protocol: HTTP
        hosts:
          - "apiv5.infraops.us"
    labels: {}
    annotations:
      external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
      external-dns.alpha.kubernetes.io/hostname: "apiv5.infraops.us"
      external-dns.alpha.kubernetes.io/target: c903dcc9-5c64-4d5c-88e1-ee8632ef4ac0.cfargotunnel.com
      kubernetes.io/ingress.class: "istio"
  virtualService:
    enabled: true
    hosts:
      - "apiv5.infraops.us"
    http:
      - name: primary
        match:
          - uri:
              prefix: "/"
        route:
          - destination:
              subset: stable
              port:
                number: 80
          - destination:
              subset: canary
              port:
                number: 80
        retries:
          attempts: 3
          perTryTimeout: 2s
          retryOn: "gateway-error,connect-failure,refused-stream"
        timeout: 5s
        fault:
          delay:
            percentage:
              value: 0.1
            fixedDelay: 5s
        corsPolicy:
          allowOrigins:
            - exact: "https://apiv5.infraops.us"
          allowMethods:
            - GET
          allowHeaders:
            - authorization
            - content-type
          maxAge: "24h"
        headers:
          response:
            set:
              strict-transport-security: "max-age=31536000; includeSubDomains"
              x-content-type-options: "nosniff"
              x-frame-options: "DENY"
  destinationRule:
    enabled: true
    trafficPolicy:
      loadBalancer:
        simple: ROUND_ROBIN
      connectionPool:
        http:
          maxRequestsPerConnection: 10
          http2MaxRequests: 1000
          maxRetries: 3
      tls:
        mode: ISTIO_MUTUAL
    subsets:
      stable:
        loadBalancer:
          simple: LEAST_CONN
        tls:
          mode: ISTIO_MUTUAL
      canary:
        loadBalancer:
          simple: LEAST_CONN
        tls:
          mode: ISTIO_MUTUAL
  sidecar:
    enabled: true
    name: default-v2
    egress:
      - hosts: 
          - "./*"
          - "istio-system/*"
    outboundTrafficPolicy:
      mode: REGISTRY_ONLY
  peerAuthentication:
    enabled: true
    name: default-v2
    mtls:
      mode: PERMISSIVE
  externalServices:
    enabled: true
    jsonplaceholder:
      enabled: true
      name: jsonplaceholder.typicode.com
      hosts:
        - "jsonplaceholder.typicode.com"
      ports:
        - number: 443
          name: https
          protocol: HTTPS
      resolution: DNS
      location: MESH_EXTERNAL
      destinationRule:
        enabled: true
        name: jsonplaceholder-dr
        host: "jsonplaceholder.typicode.com"
        trafficPolicy:
          tls:
            mode: DISABLE
          loadBalancer:
            simple: ROUND_ROBIN
### - Argo Rollouts Configuration ---
rollout:
  steps: